@model ProductReviewsModel
@using Nop.Core.Infrastructure
@using Nop.Web.Framework.Themes
@using Nop.Web.Models.Catalog;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(Model.ProductName);
    Html.AddTitleParts(T("PageTitle.ProductReviews").Text);

    var currentThemeName = EngineContext.Current.Resolve<IThemeContext>().WorkingThemeName;
}
<div class="page product-reviews-page">
    <div class="page-title">
        <h1>@T("Reviews.ProductReviewsFor") <a href="@Url.RouteUrl("Product", new { SeName = Model.ProductSeName })">@Model.ProductName</a></h1>
    </div>
    <div class="page-body">
        @Html.Widget("productreviews_page_top", Model.ProductId)
        @if (Model.AddProductReview.SuccessfullyAdded)
        {
            <div class="result">
                @Model.AddProductReview.Result
            </div>
        }
        else
        {
            <div class="write-review" id="review-form">
                <div class="title">
                    <strong>@T("Reviews.Write")</strong>
                </div>
                @using (Html.BeginForm())
                {
                    <div class="message-error">@Html.ValidationSummary(true)</div>
                    <div class="form-fields">
                        <div class="inputs">
                            @Html.LabelFor(model => model.AddProductReview.Title, new { }, ":")
                            @Html.TextBoxFor(model => model.AddProductReview.Title, Model.AddProductReview.CanCurrentCustomerLeaveReview ? (object)(new { @class = "review-title" }) : (object)(new { @class = "review-title", disabled = "disabled" }))
                            @Html.ValidationMessageFor(model => model.AddProductReview.Title)
                        </div>
                        <div class="inputs">
                            @Html.LabelFor(model => model.AddProductReview.ReviewText, new { }, ":")
                            @Html.TextAreaFor(model => model.AddProductReview.ReviewText, Model.AddProductReview.CanCurrentCustomerLeaveReview ? (object)(new { @class = "review-text" }) : (object)(new { @class = "review-text", disabled = "disabled" }))
                            @Html.ValidationMessageFor(model => model.AddProductReview.ReviewText)
                        </div>
                        <div class="review-rating">
                            @Html.LabelFor(model => model.AddProductReview.Rating, new { }, ":")
                                <ul>
                                    <li class="first">@T("Reviews.Fields.Rating.Bad")</li>
                                    <li>
                                        @Html.RadioButtonFor(model => model.AddProductReview.Rating, "1", new { id = "addproductrating_1" })
                                        @Html.RadioButtonFor(model => model.AddProductReview.Rating, "2", new { id = "addproductrating_2" })
                                        @Html.RadioButtonFor(model => model.AddProductReview.Rating, "3", new { id = "addproductrating_3" })
                                        @Html.RadioButtonFor(model => model.AddProductReview.Rating, "4", new { id = "addproductrating_4" })
                                        @Html.RadioButtonFor(model => model.AddProductReview.Rating, "5", new { id = "addproductrating_5" })
                                    </li>
                                    <li class="last">@T("Reviews.Fields.Rating.Excellent")</li>
                                </ul>
                        </div>
                        @if (Model.AddProductReview.DisplayCaptcha)
                        {
                            <div class="captcha-box">
                                @Html.Raw(Html.GenerateCaptcha())
                            </div>
                        }
                    </div>
                    <div class="buttons">
                        <input type="submit" name="add-review" class="button write-product-review-button" value="@T("Reviews.SubmitButton")" />
                    </div>
                }
            </div>
        }
        @if (Model.Items.Count > 0)
        {
            <div class="product-review-list">
                <div class="title">
                    <strong>@T("Reviews.ExistingReviews")</strong>
                </div>
                <ul class="feedbacks">
                    @foreach (var review in Model.Items)
                    {
                        <li>
                            <div class="rating">
                                @for (var i = 0; i < review.Rating; i++)
                                {
                                    <img src="@Url.Content("~/Themes/" + currentThemeName + "/Content/img/rating-full.png")">
                                }
                                @for (var i = review.Rating; i < 5; i++)
                                {
                                    <img src="@Url.Content("~/Themes/" + currentThemeName + "/Content/img/rating-empty.png")">
                                }
                            </div>
                            <div class="meta">
                                от <span class="author">@(review.CustomerName)</span> | Дата: <span class="feedback-date">@review.WrittenOnStr</span>
                            </div>
                            <div class="text">
                                @review.Title <br/>
                                @Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(review.ReviewText, false, true, false, false, false, false))
                            </div>
                        </li>
                    }
                </ul>
</div>
        }
        @Html.Widget("productreviews_page_bottom", Model.ProductId)
    </div>
</div>
